#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const getTitleFromHTML = (filePath) => {
  try {
    const htmlContent = fs.readFileSync(filePath, 'utf8');
    const titleMatch = htmlContent.match(/<title>(.*?)<\/title>/);
    return titleMatch ? titleMatch[1] : 'No Title Found';
  } catch (error) {
    console.error(`Error reading file ${filePath}: ${error}`);
    return 'No Title Found';
  }
};

const createSiteStructureJSON = (directory, basePath, exclusions) => {
  const rootIndexPath = path.join(directory, 'index.html');
  const rootTitle = fs.existsSync(rootIndexPath) ? getTitleFromHTML(rootIndexPath) : 'Home';

  const siteStructure = { slug: '/', title: rootTitle };

  const processDirectory = (dir, parentSlug) => {
    let children = [];
    fs.readdirSync(dir).forEach(item => {
      const fullPath = path.join(dir, item);
      const relativePath = path.relative(basePath, fullPath);
      if (exclusions.some(exclusion => relativePath.startsWith(exclusion))) return;
      if (fs.statSync(fullPath).isDirectory()) {
        children = children.concat(processSubdirectory(fullPath, parentSlug, relativePath));
      }
    });
    return children;
  };

  const processSubdirectory = (fullPath, parentSlug, relativePath) => {
    const index_path = path.join(fullPath, 'index.html');
    if (fs.existsSync(index_path)) {
      const slug = `${parentSlug}${relativePath.split('/').pop()}/`;
      const title = getTitleFromHTML(index_path);
      const childStructure = { slug, title };
      const childChildren = processDirectory(fullPath, slug);
      if (childChildren.length > 0) childStructure.children = childChildren;
      return [childStructure];
    } else {
      return processDirectory(fullPath, `${parentSlug}${relativePath}/`);
    }
  };

  siteStructure.children = processDirectory(directory, '/');
  return siteStructure;
};

const convertToCSV = (siteStructure) => {
  let csv = 'slug,title\n';
  const processNode = (node, parentSlug = '') => {
    const fullSlug = parentSlug === '/' ? node.slug : `${node.slug}`;
    csv += `"${fullSlug}","${node.title.replace(/"/g, '""')}"\n`;
    node.children?.forEach(child => processNode(child, fullSlug));
  };
  processNode(siteStructure);
  return csv;
};

const args = process.argv.slice(2);
const siteRoot = args.find(arg => !arg.startsWith('--')) || './example.com';
const exclusions = args.filter(arg => arg.startsWith('--exclude=')).map(arg => arg.split('=')[1]);
const outputFile = args.find(arg => arg.startsWith('--output='))?.split('=')[1];
const outputFormat = args.find(arg => arg.startsWith('--format='))?.split('=')[1] || 'json';

const siteStructure = createSiteStructureJSON(siteRoot, siteRoot, exclusions);
const result = outputFormat === 'csv' ? convertToCSV(siteStructure) : JSON.stringify(siteStructure, null, 2);

if (outputFile) {
  fs.writeFileSync(outputFile, result);
} else {
  console.log(result);
}