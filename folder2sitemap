#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const get_title_from_html = (filePath) => {
  const htmlContent = fs.readFileSync(filePath, 'utf8');
  const titleMatch = htmlContent.match(/<title>(.*?)<\/title>/);
  return titleMatch ? titleMatch[1] : 'No Title Found';
};

const create_site_structure_json = (directory, base_path, exclusions) => {
  const root_index_path = path.join(directory, 'index.html');
  const root_title = fs.existsSync(root_index_path) ? get_title_from_html(root_index_path) : 'Home';

  const site_structure = {
    slug: '/',
    title: root_title
  };

  const processDirectory = (dir, parentSlug) => {
    let children = [];
    fs.readdirSync(dir).forEach(item => {
      const fullPath = path.join(dir, item);
      // Check if the path is excluded
      const relativePath = path.relative(base_path, fullPath);
      if (exclusions.some(exclusion => relativePath.startsWith(exclusion))) {
        return; // Skip excluded paths
      }
      if (fs.statSync(fullPath).isDirectory()) {
        const index_path = path.join(fullPath, 'index.html');
        if (fs.existsSync(index_path)) {
          const slugSegments = parentSlug === '/' ? [parentSlug] : parentSlug.split('/');
          const newSegment = relativePath.split('/').pop();
          const slug = `${slugSegments.join('/')}${newSegment}/`;
          const title = get_title_from_html(index_path);
          const childStructure = {
            slug: slug,
            title: title
          };
          const childChildren = processDirectory(fullPath, slug);
          if (childChildren.length > 0) {
            childStructure.children = childChildren;
          }
          children.push(childStructure);
        } else {
          children = children.concat(processDirectory(fullPath, `${parentSlug}${item}/`));
        }
      }
    });
    return children;
  };

  const rootChildren = processDirectory(directory, '/');
  if (rootChildren.length > 0) {
    site_structure.children = rootChildren;
  }

  return site_structure;
};

// Get site_root and exclusions from command line arguments
const args = process.argv.slice(2);
const site_root = args.find(arg => !arg.startsWith('--')) || './example.com';
const exclusions = args.filter(arg => arg.startsWith('--exclude=')).map(arg => arg.split('=')[1]);
const outputArg = args.find(arg => arg.startsWith('--output='));
const outputFile = outputArg ? outputArg.split('=')[1] : null;

const result = JSON.stringify(create_site_structure_json(site_root, site_root, exclusions), null, 2);

if (outputFile) {
  fs.writeFileSync(outputFile, result);
} else {
  console.log(result);
}